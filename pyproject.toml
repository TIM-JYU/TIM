[tool.poetry]
name = "TIM"
version = "1.0.0"
description = "TIM (The Interactive Material) is an open-source cloud-based platform for creating interactive learning documents."
authors = [
    "TIM contributors"
]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
flask = "^2.3.2"
lxml = "^4.9.2"
webargs = "5.5"
wheel = "^0.41.0"
setuptools = "^68.0.0"
attrs = "^23.1.0"
authlib = "^1.2.1"
autopep8 = "^2.0.2"
beautifulsoup4 = "^4.11.1"
bcrypt = "^4.0.1"
bleach = "^6.0.0"
celery = {extras = ["redis"], version = "^5.3.1"}
cffi = "^1.15.0"
charset-normalizer = "^3.3.0"
cssselect = "^1.1.0"
docformatter = "^1.4"
filelock = "^3.7.1"
Flask-Assets = "^2.0"
Flask-Caching = "^2.0.2"
Flask-Compress = "^1.12"
Flask-Migrate = "^4.0.4"
flask-oidc = "^2.0.3"
Flask-OpenID = "^1.3.0"
Flask-SQLAlchemy = "^3.0.5"
Flask-Testing = "^0.8.1"
Flask-WTF = "^1.0.1"
gevent = "^23.7.0"
webassets = { git = "https://github.com/miracle2k/webassets.git" }
gunicorn = "^21.2.0"
html5lib = "^1.1"
httpagentparser = "^1.9.2"
humanize = "^4.1.0"
isodate = "^0.6.1"
langcodes = { extras = ["data"], version = "^3.3.0" }
libsass = "^0.22.0"
mailmanclient = "^3.3.3"
marshmallow = "^3.16.0"
marshmallow-enum = "^1.5.1"
marshmallow-union = "^0.1.15.post1"
mmh3 = "^4.0.0"
pandocfilters = "^1.5.0"
pillow = "^10.0.0"
psycogreen = "^1.0.2"
psycopg2-binary = "^2.9.3"
pyaml = "^23.5.9"
PyLaTeX = "^1.4.1"
pypandoc = "^1.8.1"
python-dateutil = "^2.8.2"
python-magic = "^0.4.26"
pytz = "^2023.3"
recommonmark = "^0.7.1"
responses = "^0.23.1"
selenium = "^4.2.0"
Sphinx = "^7.0.1"
SQLAlchemy = "^2.0.19"
SQLAlchemy-Utils = "^0.41.1"
typing-inspect = "^0.9.0"
voikko = "^0.5"
Wand = "^0.6.7"
requests = "^2.27.1"
six = "^1.16.0"
python-gnupg = "^0.5.0"
pysaml2 = "^7.2.1"
cachelib = "<0.10.0"
qulacs = "^0.6.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.4.1"
mypy-extensions = "^1.0.0"
types-bleach = "^6.0.0.3"
types-filelock = "^3.2.6"
types-python-dateutil = "^2.8.17"
types-pytz = "^2023.3.0.0"
types-PyYAML = "^6.0.8"
types-redis = "^4.2.6"
types-requests = "^2.27.30"
types-attrs = "^19.1.0"
marshmallow = "^3.16.0"
bcrypt = "^4.0.1"
flask = "^2.3.2"
authlib = "^1.2.1"
langcodes = "^3.3.0"
black = {extras = ["d"], version = "^23.3.0"}
types-pysaml2 = "^1.0.0"
qulacs = "^0.6.1"
SQLAlchemy = "^2.0.19"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
extend-exclude = '''
simcirtest|
marshmallow_dataclass|
celery_sqlalchemy_scheduler|
vendor
'''

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = false
mypy_path = "timApp/modules/fields"
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_column_numbers = true
namespace_packages = true
show_error_codes = true
exclude = [
    'timApp/modules/cs/static',
    'timApp/tim_files',
    'mailman/',
    'tools/',
    'certs/',
    'timApp/auth/saml/dev',
    'timApp/auth/saml/prod',
    'timApp/auth/saml/test',
]

# Some modules have their own internal type checking, so we will always need to follow their imports
[[tool.mypy.overrides]]
module = [
    "flask.*",
    "marshmallow.*",
    "jinja2.*",
    "werkzeug.*",
    "bcrypt",
    "langcodes",
    "cli",
    "sqlalchemy.*",
]
follow_imports = "normal"

[[tool.mypy.overrides]]
module = [
    # Ignore errors in tests
    "timApp.tests.*",
    # Migrations mostly have generated code
    "timApp.migrations.*",
    "timApp.modules.cs.*",
    "timApp.modules.imagex.*",
    "timApp.modules.svn.*",
    "tim_common.fileParams",
    "tim_common.marshmallow_dataclass",
    "tim_common.tim_server",
    "timApp.celery_sqlalchemy_scheduler.*",
    "tim_common.vendor.*"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "sass",
    "authlib.*",
    "psycogreen.*",
    "alembic",
    "html5lib",
    "html5lib.*",
    "celery.schedules",
    "lxml",
    "lxml.*",
    "saml2",
    "saml2.*",
    "webargs.flaskparser",
    "flask_wtf",
    "isodate",
    "bs4",
    "sqlalchemy.dialects.postgresql",
    "mailmanclient",
    "mailmanclient.*",
    "httpagentparser",
    "pypandoc",
    "gnupg"
]
ignore_missing_imports = true

# The modules below should be gradually removed as the code is fixed.
[[tool.mypy.overrides]]
module = [
    # Right now flask.cli.command is not annotated properly, wait until it is
    "timApp.admin.*",
    "timApp.admin.migrate_to_postgre",
    "timApp.answer.answer_models",
    "timApp.answer.feedbackanswer",
    "timApp.answer.routes",
    "timApp.auth.accesshelper",
    "timApp.auth.auth_models",
    "timApp.auth.sessioninfo",
    "timApp.defaultconfig",
    "timApp.document.attributeparser",
    "timApp.document.changelog",
    "timApp.document.changelogentry",
    "timApp.document.create_item",
    "timApp.document.docinfo",
    "timApp.document.docparagraph",
    "timApp.document.docsettings",
    "timApp.document.document",
    "timApp.document.documentparser",
    "timApp.document.documentparseroptions",
    "timApp.document.documents",
    "timApp.document.documentversion",
    "timApp.document.documentwriter",
    "timApp.document.editing.clipboard",
    "timApp.document.editing.documenteditresult",
    "timApp.document.editing.editrequest",
    "timApp.document.editing.proofread",
    "timApp.document.editing.routes",
    "timApp.document.editing.routes_clipboard",
    "timApp.document.exceptions",
    "timApp.document.post_process",
    "timApp.document.randutils",
    "timApp.document.routes",
    "timApp.document.translation.routes",
    "timApp.document.translation.synchronize_translations",
    "timApp.document.translation.translation",
    "timApp.document.validationresult",
    "timApp.document.version",
    "timApp.document.yamlblock",
    "timApp.errorhandlers",
    "timApp.folder.folder",
    "timApp.folder.folder_view",
    "timApp.gamification.gamificationdata",
    "timApp.gamification.generateMap",
    "timApp.item.block",
    "timApp.item.copy_rights",
    "timApp.item.item",
    "timApp.item.manage",
    "timApp.item.partitioning",
    "timApp.item.routes",
    "timApp.item.tag",
    "timApp.item.validation",
    "timApp.lecture.askedjson",
    "timApp.lecture.askedquestion",
    "timApp.lecture.lecture",
    "timApp.lecture.lectureanswer",
    "timApp.lecture.message",
    "timApp.lecture.routes",
    "timApp.lecture.useractivity",
    "timApp.markdown.dumboclient",
    "timApp.markdown.markdownconverter",
    "timApp.note.notes",
    "timApp.note.usernote",
    "timApp.notification.notification",
    "timApp.notification.notify",
    "timApp.notification.pending_notification",
    "timApp.plugin.plugin",
    "timApp.plugin.pluginControl",
    "timApp.plugin.routes",
    "timApp.plugin.taskid",
    "timApp.plugin.timtable.row_owner_info",
    "timApp.plugin.timtable.timTable",
    "timApp.plugin.qst.qst",
    "timApp.printing.documentprinter",
    "timApp.printing.pandoc_headernumberingfilter",
    "timApp.printing.pandoc_imagefilepathsfilter",
    "timApp.printing.pandoc_inlinestylesfilter",
    "timApp.printing.print",
    "timApp.printing.printeddoc",
    "timApp.readmark.readings",
    "timApp.readmark.readmarkcollection",
    "timApp.readmark.readparagraph",
    "timApp.readmark.readparagraphtype",
    "timApp.readmark.routes",
    "timApp.slide.routes",
    "timApp.slide.slidestatus",
    "timApp.tim",
    "timApp.tim_app",
    "timApp.tim_celery",
    "timApp.timdb.init",
    "timApp.timdb.sqa",
    "timApp.timdb.timdb",
    "timApp.timtypes",
    "timApp.upload.upload",
    "timApp.upload.uploadedfile",
    "timApp.user.consentchange",
    "timApp.user.groups",
    "timApp.user.hakaorganization",
    "timApp.user.newuser",
    "timApp.user.personaluniquecode",
    "timApp.user.preferences",
    "timApp.user.scimentity",
    "timApp.user.user",
    "timApp.user.usergroup",
    "timApp.user.usergroupmember",
    "timApp.user.users",
    "timApp.util.flask.ReverseProxied",
    "timApp.util.flask.cache",
    "timApp.util.flask.filters",
    "timApp.util.flask.responsehelper",
    "timApp.util.flask.search",
    "timApp.util.get_fields",
    "timApp.util.pdftools",
    "tim_common.timjsonencoder",
]
ignore_errors = true
