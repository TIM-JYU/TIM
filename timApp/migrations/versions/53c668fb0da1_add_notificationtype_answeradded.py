"""Add NotificationType.AnswerAdded

Revision ID: 53c668fb0da1
Revises: e9a1132eec3c
Create Date: 2022-02-22 16:17:56.753911

"""

# revision identifiers, used by Alembic.
revision = "53c668fb0da1"
down_revision = "e9a1132eec3c"

import sqlalchemy as sa
from alembic import op

e = sa.Enum(
    "DocModified",
    "ParAdded",
    "ParModified",
    "ParDeleted",
    "CommentAdded",
    "CommentModified",
    "CommentDeleted",
    "AnswerAdded",
    name="notificationtype",
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "pendingnotification", sa.Column("answer_number", sa.Integer(), nullable=True)
    )

    with op.get_context().autocommit_block():
        op.execute(
            """ALTER TYPE notificationtype ADD VALUE IF NOT EXISTS 'AnswerAdded'"""
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    t_notification = sa.Table(
        "notification",
        sa.MetaData(),
        sa.Column("user_id", sa.Integer()),
        sa.Column("block_id", sa.Integer()),
        sa.Column("notification_type", e),
    )

    t_pending_notification = sa.Table(
        "pendingnotification",
        sa.MetaData(),
        sa.Column("kind", e),
    )

    con = op.get_bind()

    con.execute(
        sa.delete(t_notification).where(
            t_notification.c.notification_type == "AnswerAdded"
        )
    )
    con.execute(
        sa.delete(t_pending_notification).where(
            t_pending_notification.c.kind == "AnswerAdded"
        )
    )
    op.drop_column("pendingnotification", "answer_number")
    # Don't drop notificationtype.AnswerAdded, as it can be used in the database.
    # ### end Alembic commands ###
